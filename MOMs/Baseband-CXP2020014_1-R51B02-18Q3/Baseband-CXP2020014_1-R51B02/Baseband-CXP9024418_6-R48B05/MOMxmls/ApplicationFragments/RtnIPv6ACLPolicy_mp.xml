<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2017 Ericsson AB.
	All rights reserved

	DX ECIM Tool-chain generated this file on Dec 12, 2017 3:26:27 PM using:
	* com.ericsson.ecim.m2m 2.15.0.201710201249
	* com.ericsson.ecim.dsl 2.15.0.201710201249
	* com.ericsson.ecim.edm 2.15.0.201710201249
--><!DOCTYPE models SYSTEM "mp.dtd">
<models>
    <dtdVersion>H</dtdVersion>
    <momMetaData>
        <momTitle>title</momTitle>
        <momSubTitle>sub title</momSubTitle>
        <momIdentity>
            <docNum>0</docNum>
            <docLang>English</docLang>
            <docRev>0</docRev>
            <docDate>date</docDate>
        </momIdentity>
        <createdBy>
            <signature>EAB/FJP/TA UABERPE</signature>
        </createdBy>
        <approvedBy>
            <signature>EAB/FJP/TA UABERPE</signature>
        </approvedBy>
    </momMetaData>
    <mim author="EAB/FJP/TA UABERPE" contact="EAB/FJP/TA UABERPE" correction="0" date="" docNo="" name="RtnIPv6ACLPolicy" namespace="urn:com:ericsson:ecim:RtnIPv6ACLPolicy" namespacePrefix="rtnipv6aclpolicy" organization="" release="5" revision="" variant="Model" version="1">
        <description>IPv6 ACL Policy entities</description>
        <domainExtension domain="ECIM">
            <extension name="ecimMomName" value="ECIM_T_IPv6_ACL_Policy"/>
            <extension name="ecimMomVersion" value="1"/>
            <extension name="ecimMomRelease" value="0"/>
            <extension name="ecimMomCorrection" value="0"/>
            <extension name="immNamespace" value="NONE"/>
        </domainExtension>
        <implements correction="0" name="ECIM_T_IPv6_ACL_Policy" release="0" version="1"/>
        <enum name="AclAction">
            <description>ACL actions. &#13;
</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnFilterTypes"/>
            </domainExtension>
            <enumMember name="PERMIT">
                <description>Allow the packet that matches the ACL to flow. &#13;
</description>
                <value>0</value>
            </enumMember>
            <enumMember name="DENY">
                <description>Drop the packet if it matches the ACL. &#13;
</description>
                <value>1</value>
            </enumMember>
        </enum>
        <enum name="FragmentType">
            <description>Type of IP fragment. &#13;
</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnIPPolicyLibrary"/>
            </domainExtension>
            <enumMember name="NOTFRAGMENTED">
                <description>The entry matches no fragment at all.</description>
                <value>0</value>
                <obsolete/>
            </enumMember>
            <enumMember name="FRAGFIRST">
                <description>The entry matches the first fragment.&#13;
Optional to support - Flag: if-feature FragmentTypeFragFirst. </description>
                <value>1</value>
                <obsolete/>
            </enumMember>
            <enumMember name="FRAGLAST">
                <description>The entry matches the last fragment.&#13;
Optional to support - Flag: if-feature FragmentTypeFragLast.</description>
                <value>2</value>
                <obsolete/>
            </enumMember>
            <enumMember name="FRAGMENT">
                <description>The entry matches all fragments. FO &gt; 0 or MF != 0.  </description>
                <value>3</value>
            </enumMember>
            <enumMember name="INITIAL">
                <description>The entry matches complete (unfragmented) packets as well as initial fragments, FO==0. </description>
                <value>4</value>
            </enumMember>
            <enumMember name="NONINITIAL">
                <description>The entry matches non-initial fragments.  FO&gt;0. </description>
                <value>5</value>
            </enumMember>
        </enum>
        <derivedDataType name="IcmpType">
            <description>Regular expression pattern for IP ACL ICMP Type [0-255], covering single and range. &#13;
&#13;
Regexp : ^((BT)|((BT)(\.\.)(BT)))$ where BT=[0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5] </description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnFilterTypes"/>
            </domainExtension>
            <baseType>
                <string>
                    <validValues>^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.\.)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.\.)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="IpDscpStrST">
            <description>Smart type for IpDscp, covering a single value or a range.
Regexp : ^((BT)|((BT)(\.\.)(BT)))$ where BT=[0-9]|[1-5][0-9]|6[0-3]
&#13;
A DSCP value. Can be a single value [dd] or a range [dd..dd], where dd represents an integer in {0..63}.

Example: 1 or 5..10 </description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnFilterTypes"/>
            </domainExtension>
            <baseType>
                <string>
                    <validValues>^(([0-9]|[1-5][0-9]|6[0-3])|(([0-9]|[1-5][0-9]|6[0-3])\.\.([0-9]|[1-5][0-9]|6[0-3])))$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(([0-9]|[1-5][0-9]|6[0-3])|(([0-9]|[1-5][0-9]|6[0-3])\.\.([0-9]|[1-5][0-9]|6[0-3])))$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="IpProtocolNumberStrST">
            <description>Regular expression pattern for IP protocol numbers [0-255], covering a single value or a range.&#13;

Regexp : ^((BT)|((BT)(\.\.)(BT)))$ where BT=[0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]

Example: 1 or 5..10 
</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnFilterTypes"/>
            </domainExtension>
            <baseType>
                <string>
                    <validValues>^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.\.)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])|(([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.\.)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])))$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="Ipv6AclAddressAndPrefixLengthStr">
            <description>'IPv6 address'/'prefix length', as specified in RFC 4291.

IPv6 Address should be specified in the colon separated hex quad format without leading zeros.
Prefix length is an integer number in the range 0..128.
Any address prefix can be specified, regardless of it lies within a valid or normally invalid address range.

Example: 2001:DB8::8:800:200C:417A/64</description>
            <baseType>
                <string>
                    <validValues>(^(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|:))))/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[(^(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|:))))/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="L4PortStrST">
            <description>Regular expression pattern type for transport protocol port [0-65535] inputs. 

Covering list of values, ranges. 
Regexp=^((BT)|((BT)(\.\.)(BT)))$ where BT=[0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5].</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnFilterTypes"/>
            </domainExtension>
            <baseType>
                <string>
                    <validValues>^(([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|(([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])(\.\.)([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])))$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])|(([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])(\.\.)([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])))$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="Priority">
            <description>Priority of a policy rule.&#13;&#13;
Priority values shall be unique amongst policy rules under the same policy.&#13;
Rule: valid values are 0 and positive integers.&#13;
Note: 0 is the highest priority, larger values give lower priority.&#13;
&#13;
Maximum possible range: 0..65535</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnFilterTypes"/>
            </domainExtension>
            <baseType>
                <uint16/>
            </baseType>
        </derivedDataType>
        <derivedDataType name="RtnIPv6ACLPolicy_AclEntryIpv6_userLabel">
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>128</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>128</max>
                        </subrange>
                    </stringLength>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="RtnIPv6ACLPolicy_AclIpv6_userLabel">
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>128</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>128</max>
                        </subrange>
                    </stringLength>
                </string>
            </baseType>
        </derivedDataType>
        <class name="AclEntryIpv6">
            <description>This MOC is used to configure an entry in an Access Control List. 

It contains a set of filters for the ACL entry as well as an action and a priority. All filters refer to fields in the IP protocol header.</description>
            <attribute name="aclEntryIpv6Id">
                <description>The value component of the RDN.
</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="action">
                <description>The action of the ACL entry. 

The value can be either PERMIT or DENY.

When a packet matches the filters in this entry, the action is executed. 
When the attribute has the value DENY, the packet is dropped silently. When the attribute has the value PERMIT, the packet is accepted.</description>
                <mandatory/>
                <dataType>
                    <enumRef name="AclAction">
                        <mimName>RtnIPv6ACLPolicy</mimName>
                    </enumRef>
                </dataType>
            </attribute>
            <attribute name="addrDst">
                <description>Destination IP Address filter.
 
The value is a list of IPv6 address prefixes: Value/prefix-length. 

The ACL entry matches if any address in the list matches.
 
If the value list is empty, any IP address matches this ACL entry. 
</description>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="Ipv6AclAddressAndPrefixLengthStr">
                            <mimName>RtnIPv6ACLPolicy</mimName>
                        </derivedDataTypeRef>
                        <minLength>0</minLength>
                        <maxLength>4</maxLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="addrSrc">
                <description>Source IP Address filter.
 
The value is a list of IPv6 address prefixes: Value/prefix-length. 

The ACL entry matches if any address in the list matches.
 
If the value list is empty, any IP address matches this ACL entry.</description>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="Ipv6AclAddressAndPrefixLengthStr">
                            <mimName>RtnIPv6ACLPolicy</mimName>
                        </derivedDataTypeRef>
                        <minLength>0</minLength>
                        <maxLength>4</maxLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="dscp">
                <description>DSCP field filter.

The value is a list of DSCP values: Ranges [dd..dd] or single-values [dd], where dd represents an integer in {0..63}. 

The ACL entry matches if any DSCP value in the list matches.

If the value list is empty, any DSCP value will match this entry.</description>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="IpDscpStrST">
                            <mimName>RtnIPv6ACLPolicy</mimName>
                        </derivedDataTypeRef>
                        <minLength>0</minLength>
                        <maxLength>4</maxLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="fragmentType">
                <description>Fragment type filter. 

The value is a fragment type. 

If the value is empty, state-less handling of fragments is performed.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <enumRef name="FragmentType">
                        <mimName>RtnIPv6ACLPolicy</mimName>
                    </enumRef>
                </dataType>
            </attribute>
            <attribute name="icmpType">
                <description>ICMP type filter.

The ACL entry matches if any element in the list matches. 

If the value list is empty, any ICMP types match this entry.</description>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="IcmpType">
                            <mimName>RtnIPv6ACLPolicy</mimName>
                        </derivedDataTypeRef>
                        <minLength>0</minLength>
                        <maxLength>4</maxLength>
                        <ordered/>
                    </sequence>
                </dataType>
                <dependencies>It can be non-empty only if ipProtocol contains one single-value element, equal to ICMP (58).</dependencies>
            </attribute>
            <attribute name="ipProtocol">
                <description>Protocol number filter.

The value is a list of ranges [ddd..ddd] or single-values [ddd], where ddd represents an integer in the range {0..255}. 

The ACL entry matches if any protocol number in the list matches. 

If the value list is empty, any protocol number matches this entry.</description>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="IpProtocolNumberStrST">
                            <mimName>RtnIPv6ACLPolicy</mimName>
                        </derivedDataTypeRef>
                        <minLength>0</minLength>
                        <maxLength>4</maxLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="portDst">
                <description>Transport layer destination port filter (UDP, TCP or SCTP only).

The value is a list of port numbers: Ranges [ddddd..ddddd] or single values [ddddd], where ddddd represents an integer in the range {0..65535}.

This attribute can be non-empty only if the protocol is non-empty and if it contains elements that are single values equal to UDP (17), TCP (6), or SCTP (132).
 
The ACL entry matches if any port number in the list matches.

If the value list is empty, any port number matches this entry.
</description>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="L4PortStrST">
                            <mimName>RtnIPv6ACLPolicy</mimName>
                        </derivedDataTypeRef>
                        <minLength>0</minLength>
                        <maxLength>4</maxLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="portSrc">
                <description>Transport layer source port filter (UDP, TCP or SCTP only).

The value is a list of port numbers: Ranges [ddddd..ddddd] or single values [ddddd], where ddddd represents an integer in the range {0..65535}. 

This attribute can be non-empty only if the protocol is non-empty and if it contains elements that are single values equal to UDP (17), TCP (6), or SCTP (132)

The ACL entry matches if any port number in the list matches.

If the value list is empty, any port number matches this entry.
</description>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="L4PortStrST">
                            <mimName>RtnIPv6ACLPolicy</mimName>
                        </derivedDataTypeRef>
                        <minLength>0</minLength>
                        <maxLength>4</maxLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="priority">
                <description>Priority of this ACL entry relative to the other entries in the list.</description>
                <mandatory/>
                <dataType>
                    <derivedDataTypeRef name="Priority">
                        <mimName>RtnIPv6ACLPolicy</mimName>
                    </derivedDataTypeRef>
                </dataType>
                <dependencies>The attribute values of the AclEntryIpv6 instances must be unique within the same AclIpv6 MO.</dependencies>
            </attribute>
            <attribute name="userLabel">
                <description>Label for free use. &#13;
</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <derivedDataTypeRef name="RtnIPv6ACLPolicy_AclEntryIpv6_userLabel">
                        <mimName>RtnIPv6ACLPolicy</mimName>
                    </derivedDataTypeRef>
                </dataType>
            </attribute>
        </class>
        <class name="AclIpv6">
            <description>This MOC is used to configure an Access Control List. 

It contains an ordered list of ACL entries. See the attribute priority for details on ordering.</description>
            <validationRules>
                <rule exceptionText="" format="ECIM_Schematron_1.0" name="AclIpv6"><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
    <pattern>
         <rule>
		 <assert test='are-distinct-values(./AclEntryIpv6/@priority)'><value-of select="."/> AclEntryIpv6's priority must be unique within same AclIpv6</assert>
         </rule>
      </pattern>
</schema>]]></rule>
            </validationRules>
            <root/>
            <dependenciesScript><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
    <pattern>
         <rule>
		 <assert test='are-distinct-values(./AclEntryIpv6/@priority)'><value-of select="."/> AclEntryIpv6's priority must be unique within same AclIpv6</assert>
         </rule>
      </pattern>
</schema>]]></dependenciesScript>
            <attribute name="aclIpv6Id">
                <description>The value component of the RDN.</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="permitNdpAndMld">
                <description>Specifies whether implicit rules are added to permit NDP and MLD protocol packets.
 
If this attribute is set to true, packets with the following ICMP types are permitted:
- 130 (Multicast Listener Query)
- 131 (Multicast Listener Report v1)
- 132 (Multicast Listener Done)
- 133 (Router Solicitation)
- 134 (Router Advertisement)
- 135 (Neighbor Solicitation)
- 136 (Neighbor Advertisement)
- 137 (Redirect)
- 143 (Multicast Listener Report v2)</description>
                <dataType>
                    <boolean>
                        <defaultValue>true</defaultValue>
                    </boolean>
                </dataType>
            </attribute>
            <attribute name="reservedBy">
                <description>Contains a list of MO instances that reserve this MO instance.</description>
                <readOnly/>
                <dataType>
                    <sequence>
                        <moRef name="ManagedObject"/>
                        <minLength>0</minLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="userLabel">
                <description>Label for free use. &#13;
</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <derivedDataTypeRef name="RtnIPv6ACLPolicy_AclIpv6_userLabel">
                        <mimName>RtnIPv6ACLPolicy</mimName>
                    </derivedDataTypeRef>
                </dataType>
            </attribute>
        </class>
        <relationship name="AclIpv6_to_AclEntryIpv6">
            <containment>
                <parent>
                    <hasClass name="AclIpv6">
                        <mimName>RtnIPv6ACLPolicy</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="AclEntryIpv6">
                        <mimName>RtnIPv6ACLPolicy</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="true"/>
                    <extension name="canDelete" value="true"/>
                </domainExtension>
            </containment>
        </relationship>
    </mim>
    <interMim>
        <relationship name="Router_to_AclIpv6">
            <domainExtension domain="CoreMW">
                <extension name="splitImmDn" value="false"/>
            </domainExtension>
            <containment>
                <parent>
                    <hasClass name="Router">
                        <mimName>RtnL3Router</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="AclIpv6">
                        <mimName>RtnIPv6ACLPolicy</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="true"/>
                    <extension name="canDelete" value="true"/>
                </domainExtension>
            </containment>
        </relationship>
    </interMim>
</models>
