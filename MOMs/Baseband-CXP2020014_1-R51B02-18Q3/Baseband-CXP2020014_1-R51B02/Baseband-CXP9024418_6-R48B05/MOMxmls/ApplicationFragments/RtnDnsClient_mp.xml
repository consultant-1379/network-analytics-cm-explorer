<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2018 Ericsson AB.
	All rights reserved

	DX ECIM Tool-chain generated this file on Feb 20, 2018 1:27:06 PM using:
	* com.ericsson.ecim.m2m 2.15.0.201710201249
	* com.ericsson.ecim.dsl 2.15.0.201710201249
	* com.ericsson.ecim.edm 2.15.0.201710201249
--><!DOCTYPE models SYSTEM "mp.dtd">
<models>
    <dtdVersion>H</dtdVersion>
    <momMetaData>
        <momTitle>title</momTitle>
        <momSubTitle>sub title</momSubTitle>
        <momIdentity>
            <docNum>0</docNum>
            <docLang>English</docLang>
            <docRev>0</docRev>
            <docDate>date</docDate>
        </momIdentity>
        <createdBy>
            <signature>EAB/FJP/TA UABERPE</signature>
        </createdBy>
        <approvedBy>
            <signature>EAB/FJP/TA UABERPE</signature>
        </approvedBy>
    </momMetaData>
    <mim author="EAB/FJP/TA UABERPE" contact="EAB/FJP/TA UABERPE" correction="0" date="" docNo="" name="RtnDnsClient" namespace="urn:com:ericsson:ecim:RtnDnsClient" namespacePrefix="rtndnsclient" organization="" release="11" revision="" variant="Model" version="2">
        <description>Domain Name Service Client.</description>
        <domainExtension domain="ECIM">
            <extension name="immNamespace" value="NONE"/>
        </domainExtension>
        <enum name="DnsConfigMode">
            <description>Method of IP address configuration.</description>
            <enumMember name="MANUAL">
                <description>DNS server address(es) are configured manually.</description>
                <value>0</value>
            </enumMember>
            <enumMember name="AUTOMATIC">
                <description>DNS server address(es) are configured automatically.</description>
                <value>1</value>
            </enumMember>
        </enum>
        <derivedDataType name="IpAddress">
            <description>Regular expression pattern for IP assigned address, covering both IPv4 and IPv6.&#13;
&#13;
The type is ((IPv4 address)|(IPv6 address)), without leading 0s.&#13;
&#13;
IpV4 address = ((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))&#13;
&#13;
IPv6 address = (\s*((((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)&#13;
&#13;
Matching example is: 192.168.21.3&#13;
Another matching example is: 2001:db8:85a3:8d3:1319:8a2e:370:7348</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnFilterTypes"/>
            </domainExtension>
            <baseType>
                <string>
                    <validValues>^(((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))|(\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*))$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|1[0-9][0-9]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))|(\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*))$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="IpDNSAddress">
            <description>The IpDNSAddress type represents an IP address or a DNS domain name.

A unicast IPv4 address is presented in three-digit decimal blocks. It is specified in dotted-quad decimal notation (i.e. three-digit decimal blocks) in accordance with RFC791, The blocks are separated by a dot.
- The unicast IPV4 address is within range [1-126,128-223].[0-255].[0-255].[0-255], 7-15 characters.
- The IP address range 127.0.0.0 – 127.255.255.255 is reserved for loopback
- The IP address range 0– 0.255.255.255 are reserved
- The IP address range 169.254.1.0 - 169.254.254.255 is used for link-local addresses.

An IPv6 address is specified by 8 groups of 16 bit hexadecimal values separated by colons as described in RFC 4291. If multiple consecutive groups contain only zeros, the use of “::” indicates one or more groups of 16 bits of zeros, as described in RFC 4291, section 2.2 bullet 2. A link-local address will have prefix fe80::/10. The format of the embedded IPv4/IPv6 addresses is described in RFC 6052.
- IPv6 minimum length = 3 and maximum length = 39.
- Valid characters: 0123456789abcdefABCDEF:

A domain name is specified in dot separated alphanumeric notation as described in RFC 1034. The domain name consists of one or more parts, called labels, that are delimited by dots.
- Domain Name's length: 253 characters
- Label's length: 63 characters.
- Valid characters: a-z, A-Z, 0,1,2,3,4,5,6,7,8,9,-
- The Label’s first character is a letter.
- Labels shall not start or end with a hyphen.
- Labels shall not start with a numbers
- Labels shall end with a number or a letter.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="6"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
            </domainExtension>
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>253</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>253</max>
                        </subrange>
                    </stringLength>
                    <validValues>^((([1-9]|[1-9][0-9]|12[012345689]|1[013456789][0-9]|2[0-1][0-9]|22[0-3])\.)(([0-9]|[0-9][0-9]|[0-1][0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2})([0-9]|[0-9][0-9]|[0-1][0-9][0-9]|2[0-4][0-9]|25[0-5])$|^((([0-9A-Fa-f]{1,4}:){1,5}:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(([0-9A-Fa-f]{1,4}:){6,7}:)|(([0-9A-Fa-f]{1,4}:){6}((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3}))|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}(:[0-9A-Fa-f]{1,4}){1,2})|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?))|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){2,3})|((([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){1,2})(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){3,4})|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){1,3}(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){4,5})|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){1,4}(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){5,6})|((:(:[0-9A-Fa-f]{1,4}){1,5})(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(:(:[0-9A-Fa-f]{1,4}){6,7})|(([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(((::FFFF)|(0:0:0:0:0:FFFF))(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})))$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="Must be a valid Ipv4, Ipv6 or DNS address. Ipv4 Example 164.164.0.0 or Ipv6 Example 2001:0db8:85a3:0000:0000:8a2e:0370:7334 or DNS Example www.ericsson.com." format="posix_ere" name="Pattern Constraint"><![CDATA[^((([1-9]|[1-9][0-9]|12[012345689]|1[013456789][0-9]|2[0-1][0-9]|22[0-3])\.)(([0-9]|[0-9][0-9]|[0-1][0-9][0-9]|2[0-4][0-9]|25[0-5])\.){2})([0-9]|[0-9][0-9]|[0-1][0-9][0-9]|2[0-4][0-9]|25[0-5])$|^((([0-9A-Fa-f]{1,4}:){1,5}:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(([0-9A-Fa-f]{1,4}:){6,7}:)|(([0-9A-Fa-f]{1,4}:){6}((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3}))|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}(:[0-9A-Fa-f]{1,4}){1,2})|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?))|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){2,3})|((([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){1,2})(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){3,4})|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){1,3}(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){4,5})|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){1,4}(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){5,6})|((:(:[0-9A-Fa-f]{1,4}){1,5})(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|(:(:[0-9A-Fa-f]{1,4}){6,7})|(([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(((::FFFF)|(0:0:0:0:0:FFFF))(:(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})))$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="RtnDnsClient_DnsClient_dscp">
            <baseType>
                <uint8>
                    <range>
                        <min>0</min>
                        <max>63</max>
                    </range>
                    <ranges>
                        <subrange>
                            <min>0</min>
                            <max>63</max>
                        </subrange>
                    </ranges>
                </uint8>
            </baseType>
        </derivedDataType>
        <derivedDataType name="RtnDnsClient_DnsClient_userLabel">
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>128</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>128</max>
                        </subrange>
                    </stringLength>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="RtnDnsClient_DomainFilter_domain">
            <baseType>
                <string>
                    <validValues>^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$</validValues>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="RtnDnsClient_DomainFilter_userLabel">
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>128</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>128</max>
                        </subrange>
                    </stringLength>
                </string>
            </baseType>
        </derivedDataType>
        <class name="DnsClient">
            <description>Represents DNS client.</description>
            <validationRules>
                <rule exceptionText="" format="ECIM_Schematron_1.0" name="DnsClient"><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
	<pattern>
		<rule>
		<assert test='(not(some $serverAddress in serverAddress satisfies matches($serverAddress, "^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$"))) or (count(serverAddress) eq 0)'><value-of select="."/> Server addresses must be IPv4 or IPv6.</assert>
		 <assert test='(every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) or (every $serverAddress in serverAddress satisfies contains($serverAddress, ":"))'><value-of select="."/> Server addresses must be of same type, either IPv4 or IPv6.</assert>
		 <assert test='(every $localIpAddress in @localIpAddress satisfies(contains($localIpAddress,"AddressIPv4="))) or (every $localIpAddress in @localIpAddress satisfies(contains($localIpAddress,"AddressIPv6=")))'><value-of select="."/> localIpAddress must refer  to an AddressIPv4 MO or an AddressIPv6 MO.</assert>
		 <assert test='every $localIpAddress in @localIpAddress satisfies(exists($localIpAddress))'><value-of select="."/> localIpAddress must refer  to an existing AddressIPv4 MO or an AddressIPv6 MO.</assert>
		 <assert test='not((@localIpAddress and (../@routerId ne @localIpAddress/../../@routerId)))'><value-of select="."/> localIpAddress must refer  to an AddressIPv4 MO or an AddressIPv6 MO within the same routing domain.</assert>
		 <assert test='((every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) and (every $localIpAddress in localIpAddress satisfies(not(contains($localIpAddress,"AddressIPv6="))))) or ((every $serverAddress in serverAddress satisfies contains($serverAddress, ":")) and (every $localIpAddress in localIpAddress satisfies(not(contains($localIpAddress,"AddressIPv4=")))))'><value-of select="."/> Server addresses and localIpAddress must be of same type, either IPv4 or IPv6.</assert>
		 <assert test='not(@configurationMode eq 1 and (count(../InterfaceIPv4/AddressIPv4[@configurationMode gt 0]) eq 0 and @configurationMode eq 1 and count(../InterfaceIPv6/AddressIPv6[@configurationMode gt 0]) eq 0))'><value-of select="."/> If configurationMode is AUTOMATIC, there must be AddressIPv4 MO or AddressIPv6 MO with configurationMode other than MANUAL within Router MO.</assert>
		 <assert test='not(@configurationMode eq 1 and count(DomainFilter) gt 0)'><value-of select="."/> If configurationMode is AUTOMATIC, there can be no child DomainFilter MO.</assert>
		 <assert test='not(@configurationMode eq 1 and count(serverAddress) gt 0)'><value-of select="."/> If configurationMode is AUTOMATIC, serverAddress cannot be set.</assert>
		 <assert test='not(@configurationMode eq 1 and count(@localIpAddress/@configurationMode[. eq 0]) gt 0)'><value-of select="."/> If configurationMode is AUTOMATIC for this MO, localIpAddress attribute must either not be set or it must refer to AddressIPv4 MO or AddressIPv6 MO with configuration mode other than MANUAL.</assert>
		 <assert test='not(@configurationMode eq 1 and not(@localIpAddress) and count(../InterfaceIPv4/AddressIPv4[@configurationMode eq 2]) gt 0 and count(../InterfaceIPv6/AddressIPv6[@configurationMode eq 1]) gt 0)'><value-of select="."/> If configurationMode is AUTOMATIC for this MO, and there is one AddressIPv4 MO and one AddressIPv6 MO with configurationMode other than MANUAL within Router MO, localIpAddress attribute must be set.</assert>
		</rule>
	</pattern>
</schema>]]></rule>
            </validationRules>
            <root/>
            <dependenciesScript><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
	<pattern>
		<rule>
		<assert test='(not(some $serverAddress in serverAddress satisfies matches($serverAddress, "^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$"))) or (count(serverAddress) eq 0)'><value-of select="."/> Server addresses must be IPv4 or IPv6.</assert>
		 <assert test='(every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) or (every $serverAddress in serverAddress satisfies contains($serverAddress, ":"))'><value-of select="."/> Server addresses must be of same type, either IPv4 or IPv6.</assert>
		 <assert test='(every $localIpAddress in @localIpAddress satisfies(contains($localIpAddress,"AddressIPv4="))) or (every $localIpAddress in @localIpAddress satisfies(contains($localIpAddress,"AddressIPv6=")))'><value-of select="."/> localIpAddress must refer  to an AddressIPv4 MO or an AddressIPv6 MO.</assert>
		 <assert test='every $localIpAddress in @localIpAddress satisfies(exists($localIpAddress))'><value-of select="."/> localIpAddress must refer  to an existing AddressIPv4 MO or an AddressIPv6 MO.</assert>
		 <assert test='not((@localIpAddress and (../@routerId ne @localIpAddress/../../@routerId)))'><value-of select="."/> localIpAddress must refer  to an AddressIPv4 MO or an AddressIPv6 MO within the same routing domain.</assert>
		 <assert test='((every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) and (every $localIpAddress in localIpAddress satisfies(not(contains($localIpAddress,"AddressIPv6="))))) or ((every $serverAddress in serverAddress satisfies contains($serverAddress, ":")) and (every $localIpAddress in localIpAddress satisfies(not(contains($localIpAddress,"AddressIPv4=")))))'><value-of select="."/> Server addresses and localIpAddress must be of same type, either IPv4 or IPv6.</assert>
		 <assert test='not(@configurationMode eq 1 and (count(../InterfaceIPv4/AddressIPv4[@configurationMode gt 0]) eq 0 and @configurationMode eq 1 and count(../InterfaceIPv6/AddressIPv6[@configurationMode gt 0]) eq 0))'><value-of select="."/> If configurationMode is AUTOMATIC, there must be AddressIPv4 MO or AddressIPv6 MO with configurationMode other than MANUAL within Router MO.</assert>
		 <assert test='not(@configurationMode eq 1 and count(DomainFilter) gt 0)'><value-of select="."/> If configurationMode is AUTOMATIC, there can be no child DomainFilter MO.</assert>
		 <assert test='not(@configurationMode eq 1 and count(serverAddress) gt 0)'><value-of select="."/> If configurationMode is AUTOMATIC, serverAddress cannot be set.</assert>
		 <assert test='not(@configurationMode eq 1 and count(@localIpAddress/@configurationMode[. eq 0]) gt 0)'><value-of select="."/> If configurationMode is AUTOMATIC for this MO, localIpAddress attribute must either not be set or it must refer to AddressIPv4 MO or AddressIPv6 MO with configuration mode other than MANUAL.</assert>
		 <assert test='not(@configurationMode eq 1 and not(@localIpAddress) and count(../InterfaceIPv4/AddressIPv4[@configurationMode eq 2]) gt 0 and count(../InterfaceIPv6/AddressIPv6[@configurationMode eq 1]) gt 0)'><value-of select="."/> If configurationMode is AUTOMATIC for this MO, and there is one AddressIPv4 MO and one AddressIPv6 MO with configurationMode other than MANUAL within Router MO, localIpAddress attribute must be set.</assert>
		</rule>
	</pattern>
</schema>]]></dependenciesScript>
            <attribute name="configurationMode">
                <description>Whether DNS server addresses are configured manually or are retrieved automatically using either DHCP, IPv6 autoconfiguration or IKE configuration payload method.

If AUTOMATIC, up to three DNS server addresses are retrieved either from security gateway, DHCP server or router.
Retrieved addresses are listed in usedServerAddresses.</description>
                <dataType>
                    <enumRef name="DnsConfigMode">
                        <defaultValue>MANUAL</defaultValue>
                        <mimName>RtnDnsClient</mimName>
                    </enumRef>
                </dataType>
                <dependencies>If AUTOMATIC, there must be AddressIPv4 MO or AddressIPv6 MO with configurationMode other than MANUAL within Router MO.
If AUTOMATIC, there can be no child DomainFilter MO.
If AUTOMATIC, serverAddress cannot be set.
If AUTOMATIC, localIpAddress attribute must either not be set or it must refer to AddressIPv4 MO or AddressIPv6 MO with configuration mode other than MANUAL.
If AUTOMATIC, and there is one AddressIPv4 MO and one AddressIPv6 MO with configurationMode other than MANUAL within Router MO, localIpAddress attribute must be set.</dependencies>
            </attribute>
            <attribute name="dnsClientId">
                <description>The value component of the RDN.</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="dscp">
                <description>DSCP value for DNS related IP packets.
Only IP packets originated from this node are tagged with DSCP value.</description>
                <dataType>
                    <derivedDataTypeRef name="RtnDnsClient_DnsClient_dscp">
                        <defaultValue>40</defaultValue>
                        <mimName>RtnDnsClient</mimName>
                    </derivedDataTypeRef>
                </dataType>
                <specification>RFC 2597</specification>
            </attribute>
            <attribute name="localIpAddress">
                <description>Reference to address.

If set, DNS requests are sent from address configured by referenced MO type AddressIPv4 or AddressIPv6.
If unset, DNS requests are sent from address, within Router MO, selected by system.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <moRef name="ManagedObject"/>
                </dataType>
                <dependencies>Referred MO type AddressIPv4 or AddressIPv6 must be within same Router MO.
Must be of same type as serverAddress in DomainFilter MO, either IPv4 or IPv6 address.
If configurationMode is AUTOMATIC, this attribute must either not be set or it must refer to  AddressIPv4 MO or AddressIPv6 MO with configuration mode other than MANUAL.
If configurationMode is AUTOMATIC, and there is one AddressIPv4 MO and one AddressIPv6 MO with configurationMode other than MANUAL within Router MO, this attribute must be set.
</dependencies>
            </attribute>
            <attribute name="reservedBy">
                <description>Contains a list of MO instances that reserve this MO instance.</description>
                <readOnly/>
                <dataType>
                    <sequence>
                        <moRef name="ManagedObject"/>
                        <minLength>0</minLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="serverAddress">
                <description>List of configured DNS server addresses.</description>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="IpDNSAddress">
                            <mimName>RtnDnsClient</mimName>
                        </derivedDataTypeRef>
                        <minLength>0</minLength>
                        <maxLength>3</maxLength>
                    </sequence>
                </dataType>
                <dependencies>Server addresses must be of same type, either IPv4 or IPv6 address.
Server addresses must be of same type as localIpAddress (IPv4 or IPv6).
Must be of same type as serverAddress in DomainFilter MO, either IPv4 or IPv6 address.
If configurationMode is AUTOMATIC, serverAddress cannot be set.</dependencies>
            </attribute>
            <attribute name="usedServerAddress">
                <description>List of used DNS server addresses.

IPv4 address is specified in dotted quad notation, for example 130.100.92.154. RFC 791 describes syntax details.
IPv6 address is specified by 8 groups of 16 bit hexadecimal values separated by colons, for example 2001:0db8:85a3:0000:0000:8a2e:0370:7334.
RFC 4291 describes syntax details.
</description>
                <readOnly/>
                <dataType>
                    <sequence>
                        <string/>
                        <minLength>0</minLength>
                        <maxLength>3</maxLength>
                    </sequence>
                </dataType>
                <dependencies>If configurationMode is MANUAL, attribute has the same content as serverAddress.
If configurationMode is AUTOMATIC, retrieved addresses are shown in this attribute.</dependencies>
            </attribute>
            <attribute name="userLabel">
                <description>Label for free use. </description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <derivedDataTypeRef name="RtnDnsClient_DnsClient_userLabel">
                        <mimName>RtnDnsClient</mimName>
                    </derivedDataTypeRef>
                </dataType>
            </attribute>
        </class>
        <class name="DomainFilter">
            <description>Represents domain filter, that enables sending DNS requests for one or more domains to special DNS server.
Default DNS server is defined in DnsClient MO and DomainFilter MO can provide exceptions for specific domains.</description>
            <validationRules>
                <rule exceptionText="" format="ECIM_Schematron_1.0" name="DomainFilter"><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
	<pattern>
		<rule>
		<assert test='(every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) or (every $serverAddress in serverAddress satisfies contains($serverAddress, ":"))'><value-of select="."/> Server addresses must be of same type, either IPv4 or IPv6.</assert>
		 <assert test='((every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) and (every $serverAddress in ../serverAddress satisfies contains($serverAddress, "."))) or ((every $serverAddress in serverAddress satisfies contains($serverAddress, ":")) and (every $serverAddress in ../serverAddress satisfies contains($serverAddress, ":")))'><value-of select="."/> Server addresses in DomainFilter MO and parent DnsClient MO must be of same type, either IPv4 or IPv6.</assert>
		 <assert test='((every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) and (every $localIpAddress in ../localIpAddress satisfies(not(contains($localIpAddress,"AddressIPv6="))))) or ((every $serverAddress in serverAddress satisfies contains($serverAddress, ":")) and (every $localIpAddress in ../localIpAddress satisfies(not(contains($localIpAddress,"AddressIPv4=")))))'><value-of select="."/> Server addresses in DomainFilter MO and localIpAddress in parent DnsClient MO must be of same type, either IPv4 or IPv6.</assert>
		</rule>
	</pattern>
</schema>]]></rule>
            </validationRules>
            <dependenciesScript><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
	<pattern>
		<rule>
		<assert test='(every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) or (every $serverAddress in serverAddress satisfies contains($serverAddress, ":"))'><value-of select="."/> Server addresses must be of same type, either IPv4 or IPv6.</assert>
		 <assert test='((every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) and (every $serverAddress in ../serverAddress satisfies contains($serverAddress, "."))) or ((every $serverAddress in serverAddress satisfies contains($serverAddress, ":")) and (every $serverAddress in ../serverAddress satisfies contains($serverAddress, ":")))'><value-of select="."/> Server addresses in DomainFilter MO and parent DnsClient MO must be of same type, either IPv4 or IPv6.</assert>
		 <assert test='((every $serverAddress in serverAddress satisfies contains($serverAddress, ".")) and (every $localIpAddress in ../localIpAddress satisfies(not(contains($localIpAddress,"AddressIPv6="))))) or ((every $serverAddress in serverAddress satisfies contains($serverAddress, ":")) and (every $localIpAddress in ../localIpAddress satisfies(not(contains($localIpAddress,"AddressIPv4=")))))'><value-of select="."/> Server addresses in DomainFilter MO and localIpAddress in parent DnsClient MO must be of same type, either IPv4 or IPv6.</assert>
		</rule>
	</pattern>
</schema>]]></dependenciesScript>
            <attribute name="domain">
                <description>DNS requests matching one of domains will be sent to servers specified in serverAddress instead of servers in DnsClient MO.

Example: example.com will match requests like host.example.com.</description>
                <mandatory/>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="RtnDnsClient_DomainFilter_domain">
                            <mimName>RtnDnsClient</mimName>
                        </derivedDataTypeRef>
                        <minLength>1</minLength>
                        <maxLength>5</maxLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="domainFilterId">
                <description>The value component of the RDN.</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="serverAddress">
                <description>List of addresses of DNS servers.</description>
                <mandatory/>
                <dataType>
                    <sequence>
                        <derivedDataTypeRef name="IpAddress">
                            <mimName>RtnDnsClient</mimName>
                        </derivedDataTypeRef>
                        <minLength>1</minLength>
                        <maxLength>3</maxLength>
                    </sequence>
                </dataType>
                <dependencies>Server addresses must be of same type, either IPv4 or IPv6 address.
Server addresses must be of same type as localIpAddress (IPv4 or IPv6) in DnsClient MO.
Server addresses must be of same type as serverAddress (IPv4 or IPv6) in DnsClient MO.</dependencies>
            </attribute>
            <attribute name="userLabel">
                <description>Label for free use.&#13;
</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <derivedDataTypeRef name="RtnDnsClient_DomainFilter_userLabel">
                        <mimName>RtnDnsClient</mimName>
                    </derivedDataTypeRef>
                </dataType>
            </attribute>
        </class>
        <relationship name="DnsClient_localIpAddress_to_AddressIPv4_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="localIpAddress">
                    <hasClass name="AddressIPv4">
                        <mimName>RtnL3InterfaceIPv4</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="DnsClient">
                        <mimName>RtnDnsClient</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="DnsClient_localIpAddress_to_AddressIPv6_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="localIpAddress">
                    <hasClass name="AddressIPv6">
                        <mimName>RtnL3InterfaceIPv6</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="DnsClient">
                        <mimName>RtnDnsClient</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="DnsClient_to_DomainFilter">
            <containment>
                <parent>
                    <hasClass name="DnsClient">
                        <mimName>RtnDnsClient</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="DomainFilter">
                        <mimName>RtnDnsClient</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>2</max>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="true"/>
                    <extension name="canDelete" value="true"/>
                </domainExtension>
            </containment>
        </relationship>
    </mim>
    <interMim>
        <relationship name="Router_to_DnsClient">
            <domainExtension domain="CoreMW">
                <extension name="splitImmDn" value="false"/>
            </domainExtension>
            <containment>
                <parent>
                    <hasClass name="Router">
                        <mimName>RtnL3Router</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="DnsClient">
                        <mimName>RtnDnsClient</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="true"/>
                    <extension name="canDelete" value="true"/>
                </domainExtension>
            </containment>
        </relationship>
    </interMim>
</models>
