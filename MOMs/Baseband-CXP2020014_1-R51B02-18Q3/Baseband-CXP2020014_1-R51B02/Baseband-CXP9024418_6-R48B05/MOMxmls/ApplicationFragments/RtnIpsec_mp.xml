<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2018 Ericsson AB.
	All rights reserved

	DX ECIM Tool-chain generated this file on Jun 15, 2018 12:17:34 PM using:
	* com.ericsson.ecim.m2m 2.15.0.201710201249
	* com.ericsson.ecim.dsl 2.15.0.201710201249
	* com.ericsson.ecim.edm 2.15.0.201710201249
--><!DOCTYPE models SYSTEM "mp.dtd">
<models>
    <dtdVersion>H</dtdVersion>
    <momMetaData>
        <momTitle>title</momTitle>
        <momSubTitle>sub title</momSubTitle>
        <momIdentity>
            <docNum>0</docNum>
            <docLang>English</docLang>
            <docRev>0</docRev>
            <docDate/>
        </momIdentity>
        <createdBy>
            <signature>EAB/FJP/TA UABERPE</signature>
        </createdBy>
        <approvedBy>
            <signature>EAB/FJP/TA UABERPE</signature>
        </approvedBy>
    </momMetaData>
    <mim author="EAB/FJP/TA UABERPE" contact="EAB/FJP/TA UABERPE" correction="0" date="" docNo="" name="RtnIpsec" namespace="urn:com:ericsson:ecim:RtnIpsec" namespacePrefix="rtnipsec" organization="" release="34" revision="" variant="Model" version="1">
        <description>ECIM Transport Ipsec MOM.</description>
        <domainExtension domain="ECIM">
            <extension name="ecimMomName" value="ECIM_Transport_Ipsec"/>
            <extension name="ecimMomVersion" value="1"/>
            <extension name="ecimMomRelease" value="0"/>
            <extension name="ecimMomCorrection" value="0"/>
            <extension name="immNamespace" value="NONE"/>
        </domainExtension>
        <implements correction="0" name="ECIM_Transport_Ipsec" release="0" version="1"/>
        <struct name="TrafficSelector">
            <description>Traffic selector. Used for Child SA negotiation.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnIpsecLibrary"/>
            </domainExtension>
            <structMember name="addressRange">
                <description>IPv4 or IPv6 address range.</description>
                <derivedDataTypeRef name="IpAddressRangeStr">
                    <mimName>RtnIpsec</mimName>
                </derivedDataTypeRef>
            </structMember>
        </struct>
        <enum name="AvailStatus">
            <description>The availability status is used to qualify the operational state.&#13;
 It indicates why the operational state has changed its value. </description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="6"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
            </domainExtension>
            <enumMember name="IN_TEST">
                <description>The resource is undergoing a test procedure. &#13;
If the administrative state is locked or  shutting down then normal users are precluded from using the resource.</description>
                <value>0</value>
            </enumMember>
            <enumMember name="FAILED">
                <description>The resource has an internal fault that prevents it from operating.</description>
                <value>1</value>
            </enumMember>
            <enumMember name="POWER_OFF">
                <description>The resource requires power to be applied and is not powered on.</description>
                <value>2</value>
            </enumMember>
            <enumMember name="OFF_LINE">
                <description>The resource requires a routine operation to be performed.&#13;
This routine operation is to place the resource online and make it available for use. The operation may be manual or automatic, or both. The operational state is disabled.</description>
                <value>3</value>
            </enumMember>
            <enumMember name="OFF_DUTY">
                <description>The resource has been made inactive by an internal control process.</description>
                <value>4</value>
            </enumMember>
            <enumMember name="DEPENDENCY">
                <description>The resource cannot operate because some other resource on which it depends is unavailable.</description>
                <value>5</value>
            </enumMember>
            <enumMember name="DEGRADED">
                <description>The service available from the resource is degraded in some respect.</description>
                <value>6</value>
            </enumMember>
            <enumMember name="NOT_INSTALLED">
                <description>The resource represented by the managed object is not present, or is incomplete.</description>
                <value>7</value>
            </enumMember>
            <enumMember name="LOG_FULL">
                <description>This indicates a log full condition.</description>
                <value>8</value>
            </enumMember>
            <enumMember name="DEPENDENCY_LOCKED">
                <description>The administrative state of a resource that this resource depends on is locked.&#13;
 or the availability status of the other resource is dependency locked.  </description>
                <value>9</value>
            </enumMember>
            <enumMember name="DEPENDENCY_FAILED">
                <description>The availability status of a resource that this resource depends on is failed or dependency failed.</description>
                <value>10</value>
            </enumMember>
            <enumMember name="DEPENDENCY_SHUTTINGDOWN">
                <description>The administrative state of a resource that this resource depends on is shutting down.&#13;
 or the availability status of the other resource is dependency shutting down. </description>
                <value>11</value>
            </enumMember>
        </enum>
        <enum name="IdentityOrigin">
            <description>Origin for transmitted IKE ID.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnIpsecLibrary"/>
            </domainExtension>
            <enumMember name="SUBJECT">
                <description>IKE ID is set to same value as subject field in node IPsec certificate.</description>
                <value>0</value>
            </enumMember>
            <enumMember name="SUBJECT_ALT_NAME">
                <description>IKE ID is set to same value as subjectAltName in node IPsec certificate.</description>
                <value>1</value>
            </enumMember>
        </enum>
        <enum name="OperState">
            <description>The operational states of a resource.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="6"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
            </domainExtension>
            <enumMember name="DISABLED">
                <description> The resource is  totally inoperable.</description>
                <value>0</value>
            </enumMember>
            <enumMember name="ENABLED">
                <description> The resource is partially or fully operable.</description>
                <value>1</value>
            </enumMember>
        </enum>
        <derivedDataType name="IpAddressRangeStr">
            <description>Regular expression pattern for IP address with prefix, covering both IPv4 and IPv6.&#13;
&#13;
The type is ((IPv4 address)|(IPv6 address)) / prefix without leading 0s:&#13;
		  Unicast IPv4 address / prefix 0-32.&#13;&#13;
		  IPv4 address within range [0-255].[0-255].[0-255].[0-255]&#13;&#13;
		  Regex:&#13;&#13;
(^(([1-9]|22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]))/([0-9]|[1-2][0-9]|3[0-2])$)&#13;
		 &#13;
		 Ipv6Address (colon separated, rfc4291) / prefix 0-128.&#13;&#13;
		 Regex:&#13;&#13;
\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])		 &#13;
&#13;
		 Thus resulting pattern ^((IPv4Network/Netmask)|(IPv6Network/Netmask))$ is:&#13;&#13;
^(((([1-9]|22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]))/([0-9]|[1-2][0-9]|3[0-2]))|((\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])))$&#13;
		 </description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnFilterTypes"/>
            </domainExtension>
            <baseType>
                <string>
                    <validValues>^(((([1-9]|22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]))/([0-9]|[1-2][0-9]|3[0-2]))|((\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])))$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(((([1-9]|22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]))/([0-9]|[1-2][0-9]|3[0-2]))|((\s*(((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){7}(([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){6}(:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){5}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){4}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,3})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0))?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){3}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,4})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){2}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,5})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|((([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0):){1}(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,6})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){1,7})|((:([1-9A-Fa-f][0-9A-Fa-f]{0,3}|0)){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\s*)/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])))$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="PresharedKey">
            <description>Derived string used as pre-shared key.

Pre-shared key must be either valid hexadecimal number or ASCII string.
Examples:
 * Hexadecimal: 0x5e921e7706e90bd13032
 * ASCII: dz8GmnVla0tKik4jBYXtq98NDJZG9J

Regexp: ^(0x([0-9a-fA-F])+)$|^(([^0]|0($|[^x])).*)$
</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="1"/>
                <extension name="originatingMimRelease" value="0"/>
                <extension name="originatingMimName" value="RtnIpsecLibrary"/>
            </domainExtension>
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>130</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>130</max>
                        </subrange>
                    </stringLength>
                    <validValues>^(0x([0-9a-fA-F])+)$|^(([^0]|0($|[^x])).*)$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^(0x([0-9a-fA-F])+)$|^(([^0]|0($|[^x])).*)$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="RtnIpsec_Ikev2Session_userLabel">
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>128</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>128</max>
                        </subrange>
                    </stringLength>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="RtnIpsec_IpsecPolicy_userLabel">
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>128</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>128</max>
                        </subrange>
                    </stringLength>
                </string>
            </baseType>
        </derivedDataType>
        <derivedDataType name="RtnIpsec_IpsecTunnel_userLabel">
            <baseType>
                <string>
                    <lengthRange>
                        <min>1</min>
                        <max>128</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>1</min>
                            <max>128</max>
                        </subrange>
                    </stringLength>
                </string>
            </baseType>
        </derivedDataType>
        <class name="Ikev2Session">
            <description>Represents IKEv2 that must be used as control and key exchange protocol. It also gives some properties for IKE SA.

Refers to Ikev2PolicyProfile MO that specifies cryptographic algorithms (encryption, integrity, PRF and Diffie-Hellman group), allowed lifetime and dead peer detection time for IKE SA.</description>
            <action name="installPreSharedKey">
                <description>Install pre-shared key for IKEv2 session.

This action must be used if pre-shared key based authentication is used.

To install pre-shared key, valid IPsec license must be installed, and IPsec feature must be activated.

If credential and trustCategory are set for Ikev2PolicyProfile MO, certificate-based authentication is used and pre-shared key is not used, even if installed.

Installation of pre-shared key is completed when action is completed without error.
Installation is not done if any error is returned.</description>
                <domainExtension domain="CoreMW">
                    <extension name="admOpId" value="0"/>
                </domainExtension>
                <returnType>
                    <void/>
                </returnType>
                <parameter name="presharedKey">
                    <description>String used as pre-shared key.</description>
                    <in/>
                    <dataType>
                        <derivedDataTypeRef name="PresharedKey">
                            <mimName>RtnIpsec</mimName>
                        </derivedDataTypeRef>
                    </dataType>
                </parameter>
                <disturbances>Invoking this action causes traffic disturbances.</disturbances>
            </action>
            <action name="restartIkeSa">
                <description>This causes the node to delete IKE SA and initiate negotiation of new IKE SA.</description>
                <domainExtension domain="CoreMW">
                    <extension name="admOpId" value="1"/>
                </domainExtension>
                <returnType>
                    <void/>
                </returnType>
                <disturbances>Invoking this action causes traffic disturbances.</disturbances>
            </action>
            <attribute name="ikev2PolicyProfile">
                <description>Reference to Ikev2PolicyProfile MO.</description>
                <mandatory/>
                <dataType>
                    <moRef name="Ikev2PolicyProfile">
                        <mimName>RtnIkev2PolicyProfile</mimName>
                    </moRef>
                </dataType>
                <disturbances>Changing this attribute causes traffic disturbances.</disturbances>
            </attribute>
            <attribute name="ikev2SessionId">
                <description>The value component of the RDN.</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="localIdentityOrigin">
                <description>IKE ID must be identical to subjectAltName or subject field in certificate.
If certificate based authentication is used, node sends IKE ID to security gateway identical to subjectAltName in used certificate.
If more than one IPsec VPN connection is setup from node to same security gateway, node can be forced to send different IKE IDs on two IKE SAs.
Certain security gateway configurations can reject multiple IKE SAs with same IKE ID.</description>
                <dataType>
                    <enumRef name="IdentityOrigin">
                        <defaultValue>SUBJECT_ALT_NAME</defaultValue>
                        <mimName>RtnIpsec</mimName>
                    </enumRef>
                </dataType>
                <disturbances>Changing this attribute causes traffic disturbances.</disturbances>
            </attribute>
            <attribute name="operationalState">
                <description>The operational state.&#13;
&#13;
Disabled if no IKE SA or first Child SA pair is established.</description>
                <readOnly/>
                <dataType>
                    <enumRef name="OperState">
                        <mimName>RtnIpsec</mimName>
                    </enumRef>
                </dataType>
            </attribute>
            <attribute name="userLabel">
                <description>Label for free use.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <derivedDataTypeRef name="RtnIpsec_Ikev2Session_userLabel">
                        <mimName>RtnIpsec</mimName>
                    </derivedDataTypeRef>
                </dataType>
            </attribute>
        </class>
        <class name="IpsecPolicy">
            <description>Represents which traffic is allowed through IPsec VPN connection through traffic selector configuration.
Refers to IpsecProposalProfile MO that defines which cryptographic algorithms are allowed and max lifetime of Child SA.

One Child SA pair is always established for each IpsecPolicy MO as negotiation result.
However, depending on security gateway configuration and support, multiple Child SA pairs can be negotiated.

Dependencies:
Max number IpsecPolicy MOs in node is limited to 30.
If there is AddressIPv4 MO with configurationMode IKE in Router MO, there can be only one IpsecPolicy MO for each IpsecTunnel MO encapsulated by InterfaceIPv4 MO. Same applies to corresponding IPv6 case.</description>
            <validationRules>
                <rule exceptionText="" format="ECIM_Schematron_1.0" name=""><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
	<pattern>
		<rule>
		<assert test='count(../../../Router/IpsecTunnel/IpsecPolicy) le 30'><value-of select="."/> Max number IpsecPolicy MOs in node is limited to 30.</assert>
		<assert test='not(count(../../InterfaceIPv4/AddressIPv4[@configurationMode eq 2]) gt 0 and count(../IpsecPolicy) gt 1 and contains(../@reservedBy,"InterfaceIPv4="))'><value-of select="."/> If there is AddressIPv4 MO with configurationMode IKE in Router MO, there can be only one IpsecPolicy MO for each IpsecTunnel MO encapsulated by InterfaceIPv4 MO.</assert>
		<assert test='not(count(../../InterfaceIPv6/AddressIPv6[@configurationMode eq 1]) gt 0 and count(../IpsecPolicy) gt 1 and contains(../@reservedBy,"InterfaceIPv6="))'><value-of select="."/> If there is AddressIPv6 MO with configurationMode IKE in Router MO, there can be only one IpsecPolicy MO for each IpsecTunnel MO encapsulated by InterfaceIPv6 MO.</assert>
		</rule>
	</pattern>
</schema>]]></rule>
            </validationRules>
            <dependenciesScript><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
	<pattern>
		<rule>
		<assert test='count(../../../Router/IpsecTunnel/IpsecPolicy) le 30'><value-of select="."/> Max number IpsecPolicy MOs in node is limited to 30.</assert>
		<assert test='not(count(../../InterfaceIPv4/AddressIPv4[@configurationMode eq 2]) gt 0 and count(../IpsecPolicy) gt 1 and contains(../@reservedBy,"InterfaceIPv4="))'><value-of select="."/> If there is AddressIPv4 MO with configurationMode IKE in Router MO, there can be only one IpsecPolicy MO for each IpsecTunnel MO encapsulated by InterfaceIPv4 MO.</assert>
		<assert test='not(count(../../InterfaceIPv6/AddressIPv6[@configurationMode eq 1]) gt 0 and count(../IpsecPolicy) gt 1 and contains(../@reservedBy,"InterfaceIPv6="))'><value-of select="."/> If there is AddressIPv6 MO with configurationMode IKE in Router MO, there can be only one IpsecPolicy MO for each IpsecTunnel MO encapsulated by InterfaceIPv6 MO.</assert>
		</rule>
	</pattern>
</schema>]]></dependenciesScript>
            <attribute name="antiReplayProtection">
                <description>Enable or disable anti-replay protection.</description>
                <dataType>
                    <boolean>
                        <defaultValue>true</defaultValue>
                    </boolean>
                </dataType>
                <disturbances>Changing this attribute causes traffic disturbances.</disturbances>
            </attribute>
            <attribute name="ipsecPolicyId">
                <description>The value component of the RDN.</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="ipsecProposalProfile">
                <description>Reference to IpsecProposalProfile MO.</description>
                <mandatory/>
                <dataType>
                    <moRef name="IpsecProposalProfile">
                        <mimName>RtnIpsecProposalProfile</mimName>
                    </moRef>
                </dataType>
                <disturbances>Changing this attribute causes traffic disturbances.</disturbances>
            </attribute>
            <attribute name="localTrafficSelector">
                <description>Local traffic selector to be used for Child SA negotiation.

If localTrafficSelector is not specified, all virtual inner addresses of relevant IP version in inner Router will be used as local traffic selectors in Child SA negotiation.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <structRef name="TrafficSelector">
                        <mimName>RtnIpsec</mimName>
                    </structRef>
                </dataType>
                <dependencies>If parent IpsecTunnel MO is referenced by InterfaceIPv4 MO, traffic selectors must only have IPv4 addresses.
If parent IpsecTunnel MO is referenced by InterfaceIPv6 MO, traffic selectors must only have IPv6 addresses.
Combination of remoteTrafficSelector and locaTrafficSelector must be unique for each IpsecPolicy MO, and must not be overlapping, within one IpsecTunnel MO.
If set for one IpsecPolicy MO, it must be set for all IpsecPolicy MOs within IpsecTunnel MO.
If there is AddressIPv4 MO with configurationMode IKE in Router MO, attribute must not be set for IpsecPolicy MO where IpsecTunnel MO is encapsulated by InterfaceIPv4 MO. Same applies to corresponding IPv6 case.
</dependencies>
                <disturbances>Changing this attribute causes traffic disturbances.</disturbances>
            </attribute>
            <attribute name="remoteTrafficSelector">
                <description>Ordered list of traffic selectors to be used for Child SA negotiation.

If remoteTrafficSelector is not specified, any IP address is possible.

First in list has highest priority.</description>
                <dataType>
                    <sequence>
                        <structRef name="TrafficSelector">
                            <mimName>RtnIpsec</mimName>
                        </structRef>
                        <minLength>0</minLength>
                        <maxLength>10</maxLength>
                        <nonUnique/>
                        <ordered/>
                    </sequence>
                </dataType>
                <dependencies>If parent IpsecTunnel MO is referenced by InterfaceIPv4 MO, traffic selectors must only have IPv4 addresses.
If parent IpsecTunnel MO is referenced by InterfaceIPv6 MO, traffic selectors must only have IPv6 addresses.
Combination of remoteTrafficSelector and locaTrafficSelector must be unique for each IpsecPolicy MO, and must not be overlapping, within one IpsecTunnel MO.
If localTrafficSelector is same for different IpsecPolicy MOs, at least one remoteTrafficSelector must be set for each IpsecPolicy MO.</dependencies>
                <disturbances>Changing this attribute causes traffic disturbances.</disturbances>
            </attribute>
            <attribute name="userLabel">
                <description>Label for free use.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <derivedDataTypeRef name="RtnIpsec_IpsecPolicy_userLabel">
                        <mimName>RtnIpsec</mimName>
                    </derivedDataTypeRef>
                </dataType>
            </attribute>
        </class>
        <class name="IpsecTunnel">
            <description>Represents IPsec VPN connection.
Points at endpoints in outer network,  MO type AddressIPv4 or AddressIPv6 for local endpoint, and MO type PeerIPv4 or PeerIPv6 for remote endpoint.

Dependencies:
Max number IpsecTunnel MOs in node is limited to 15.
When this MO is referred by encapsulation in InterfaceIPv4 MO not only AddressIPv4 MO as child to that MO is used as local inner address for IPsec VPN connection. Instead all AddressIPv4 MOs in inner Router MO, where each one is child to InterfaceIPv4 MO with encapsulation referring to any IpsecTunnel MO or InterfaceIPv4 MO with loopback set, are used as local inner addresses.
All local inner addresses are used as local traffic selectors for IPsec VPN connection.
Same applies when this MO is referred to by encapsulation in InterfaceIPv6 MO, except that it is AddressIPv6 MOs instead of AddressIPv4 MOs.</description>
            <validationRules>
                <rule exceptionText="" format="ECIM_Schematron_1.0" name="SchematronIpsecTunnel"><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
	<pattern>
		<rule>
		<assert test='count(../../Router/IpsecTunnel) le 15'><value-of select="."/> Max number of IpsecTunnel MOs in node is limited to 15.</assert>
		<assert test='((@localAddress/../../@routerId) eq (@remoteAddress/../@routerId))'><value-of select="."/> localAddress and remoteAddress addresses must belong to same routing domain.</assert>
		<assert test='every $remoteAddressSecondary in @remoteAddressSecondary satisfies (($remoteAddressSecondary/../@routerId) eq (@localAddress/../../@routerId))'><value-of select="."/> localAddress and remoteAddressSecondary addresses must belong to same routing domain.</assert>
		<assert test='not((count(@reservedBy[matches(., ".*,.*")]) &gt; 1))'><value-of select ="."/> InterfaceIPv4 MO and InterfaceIPv6 MO must not refer to same IpsecTunnel MO.</assert>
		<assert test='not(contains(@localAddress, ",AddressIPv4=") and contains(@remoteAddress, ",PeerIPv6="))'><value-of select ="."/> Local and remote addresses must have same address family.</assert>
		<assert test='not(contains(@localAddress, ",AddressIPv6=") and contains(@remoteAddress, ",PeerIPv4="))'><value-of select ="."/> Local and remote addresses must have same address family.</assert>
		<assert test='every $remoteAddressSecondary in @remoteAddressSecondary satisfies (not(contains($remoteAddressSecondary, ",PeerIPv4=") and contains(@remoteAddress, ",PeerIPv6=")))'><value-of select ="."/> remoteAddress and remoteAddressSecondary addresses must have same address family.</assert>
		<assert test='every $remoteAddressSecondary in @remoteAddressSecondary satisfies (not(contains($remoteAddressSecondary, ",PeerIPv6=") and contains(@remoteAddress, ",PeerIPv4=")))'><value-of select ="."/> remoteAddress and remoteAddressSecondary addresses must have same address family.</assert>
		<assert test='not(contains(@localAddress/../@encapsulation, ",IpsecTunnel="))'><value-of select ="."/> localAddress must not refer to child of InterfaceIPv4 MO or InterfaceIPv6 MO encapsulating IpsecTunnel MO.</assert>
		<assert test='every $remoteAddressSecondary in @remoteAddressSecondary satisfies (not(@remoteAddress eq $remoteAddressSecondary))'><value-of select ="."/> remoteAddress and remoteAddressSecondary addresses cannot be same.</assert>
		<assert test='every $remoteAddressSecondary in remoteAddressSecondary satisfies (count(remoteAddressSecondary) le 1)'><value-of select ="."/> Maximum one remoteAddressSecondary is allowed.</assert>
		<assert test='not((some $remoteAddressSecondary in @remoteAddressSecondary satisfies(contains($remoteAddressSecondary, ",PeerIPv4=") and not((((count($remoteAddressSecondary/@address[matches(.,"((0)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 1) or (count($remoteAddressSecondary/@address[matches(.,"((127)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 1)) or not((count($remoteAddressSecondary/@address[matches(.,"((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 0)))))) or (not(count(@remoteAddressSecondary) eq 0) and (contains(@remoteAddress, ",PeerIPv4=") and not(((count(@remoteAddress/@address[matches(.,"((0)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 1) or (count(@remoteAddress/@address[matches(.,"((127)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 1)) or not((count(@remoteAddress/@address[matches(.,"((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 0))))))'><value-of select ="."/> If remoteAddressSecondary attribute is configured, address attribute on PeerIPv4 or PeerIPv6 MOs for both remoteAddress and remoteAddressSecondary must be IP address. </assert>
		</rule>
	</pattern>
</schema>]]></rule>
            </validationRules>
            <root/>
            <dependenciesScript><![CDATA[<schema xmlns="http://purl.oclc.org/dsdl/schematron">
	<pattern>
		<rule>
		<assert test='count(../../Router/IpsecTunnel) le 15'><value-of select="."/> Max number of IpsecTunnel MOs in node is limited to 15.</assert>
		<assert test='((@localAddress/../../@routerId) eq (@remoteAddress/../@routerId))'><value-of select="."/> localAddress and remoteAddress addresses must belong to same routing domain.</assert>
		<assert test='every $remoteAddressSecondary in @remoteAddressSecondary satisfies (($remoteAddressSecondary/../@routerId) eq (@localAddress/../../@routerId))'><value-of select="."/> localAddress and remoteAddressSecondary addresses must belong to same routing domain.</assert>
		<assert test='not((count(@reservedBy[matches(., ".*,.*")]) &gt; 1))'><value-of select ="."/> InterfaceIPv4 MO and InterfaceIPv6 MO must not refer to same IpsecTunnel MO.</assert>
		<assert test='not(contains(@localAddress, ",AddressIPv4=") and contains(@remoteAddress, ",PeerIPv6="))'><value-of select ="."/> Local and remote addresses must have same address family.</assert>
		<assert test='not(contains(@localAddress, ",AddressIPv6=") and contains(@remoteAddress, ",PeerIPv4="))'><value-of select ="."/> Local and remote addresses must have same address family.</assert>
		<assert test='every $remoteAddressSecondary in @remoteAddressSecondary satisfies (not(contains($remoteAddressSecondary, ",PeerIPv4=") and contains(@remoteAddress, ",PeerIPv6=")))'><value-of select ="."/> remoteAddress and remoteAddressSecondary addresses must have same address family.</assert>
		<assert test='every $remoteAddressSecondary in @remoteAddressSecondary satisfies (not(contains($remoteAddressSecondary, ",PeerIPv6=") and contains(@remoteAddress, ",PeerIPv4=")))'><value-of select ="."/> remoteAddress and remoteAddressSecondary addresses must have same address family.</assert>
		<assert test='not(contains(@localAddress/../@encapsulation, ",IpsecTunnel="))'><value-of select ="."/> localAddress must not refer to child of InterfaceIPv4 MO or InterfaceIPv6 MO encapsulating IpsecTunnel MO.</assert>
		<assert test='every $remoteAddressSecondary in @remoteAddressSecondary satisfies (not(@remoteAddress eq $remoteAddressSecondary))'><value-of select ="."/> remoteAddress and remoteAddressSecondary addresses cannot be same.</assert>
		<assert test='every $remoteAddressSecondary in remoteAddressSecondary satisfies (count(remoteAddressSecondary) le 1)'><value-of select ="."/> Maximum one remoteAddressSecondary is allowed.</assert>
		<assert test='not((some $remoteAddressSecondary in @remoteAddressSecondary satisfies(contains($remoteAddressSecondary, ",PeerIPv4=") and not((((count($remoteAddressSecondary/@address[matches(.,"((0)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 1) or (count($remoteAddressSecondary/@address[matches(.,"((127)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 1)) or not((count($remoteAddressSecondary/@address[matches(.,"((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]]]><![CDATA[)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 0)))))) or (not(count(@remoteAddressSecondary) eq 0) and (contains(@remoteAddress, ",PeerIPv4=") and not(((count(@remoteAddress/@address[matches(.,"((0)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 1) or (count(@remoteAddress/@address[matches(.,"((127)\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 1)) or not((count(@remoteAddress/@address[matches(.,"((22[0-3]|2[01][0-9]|1[013456789][0-9]|12[012345689]|[1-9][0-9]|[1-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))$")]) eq 0))))))'><value-of select ="."/> If remoteAddressSecondary attribute is configured, address attribute on PeerIPv4 or PeerIPv6 MOs for both remoteAddress and remoteAddressSecondary must be IP address. </assert>
		</rule>
	</pattern>
</schema>]]></dependenciesScript>
            <attribute name="availabilityStatus">
                <description>The availability status.

It contains details about operationalState.</description>
                <noNotification/>
                <readOnly/>
                <dataType>
                    <sequence>
                        <enumRef name="AvailStatus">
                            <mimName>RtnIpsec</mimName>
                        </enumRef>
                        <minLength>0</minLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="ipsecTunnelId">
                <description>The value component of the RDN.</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="localAddress">
                <description>Tunnel local endpoint assigned IP address, local outer address of IPsec VPN connection.

Valid reference is of MO type AddressIPv4 or AddressIPv6.</description>
                <mandatory/>
                <dataType>
                    <moRef name="ManagedObject"/>
                </dataType>
                <dependencies>Local and remote addresses must have same address family and belong to same routing domain. They must be contained under same Router MO.
Must not refer to child of InterfaceIPv4 MO or InterfaceIPv6 MO encapsulating IpsecTunnel MO.
Combination of local and remote outer addresses must be unique for each IpsecTunnel MO.</dependencies>
            </attribute>
            <attribute name="operationalState">
                <description>The operational state.

The operationalState is disabled if the associated Ikev2Session is disabled.</description>
                <noNotification/>
                <readOnly/>
                <dataType>
                    <enumRef name="OperState">
                        <mimName>RtnIpsec</mimName>
                    </enumRef>
                </dataType>
            </attribute>
            <attribute name="remoteAddress">
                <description>Remote outer address of IPsec VPN connection.

Valid reference is of MO type PeerIPv4 or PeerIPv6.</description>
                <mandatory/>
                <dataType>
                    <moRef name="ManagedObject"/>
                </dataType>
                <dependencies>Local and remote addresses must have same address family and belong to same routing domain. They must be contained under same Router MO.
This attribute and remoteAddressSecondary addresses must have same address family.
This attribute and remoteAddressSecondary cannot be same.
Combination of local and remote outer addresses must be unique for each IpsecTunnel MO.</dependencies>
            </attribute>
            <attribute name="remoteAddressSecondary">
                <description>Secondary remote outer address of IPsec VPN connection.

Configure if IPsec active-standby redundancy is to be used. Only one reference can be configured.
In this case PeerIPv4 or PeerIPv6 in remoteAddress represents primary security gateway.
PeerIPv4 or PeerIPv6 in remoteAddressSecondary represents secondary security gateway.

Valid reference is of MO type PeerIPv4 or PeerIPv6.

</description>
                <dataType>
                    <sequence>
                        <moRef name="ManagedObject"/>
                        <minLength>0</minLength>
                    </sequence>
                </dataType>
                <dependencies>Local and remote addresses must have same address family and belong to same routing domain. They must be contained under same Router MO.
This attribute and remoteAddress addresses must have same address family.
Maximum one remoteAddressSecondary is allowed.
Must not refer to same PeerIPv4 or PeerIPv6 MO as attribute remoteAddress.
If this attribute is configured, address attribute on PeerIPv4 or PeerIPv6 MOs for both remoteAddress and remoteAddressSecondary must be IP address.
Combination of local and remote outer addresses must be unique for each IpsecTunnel MO.</dependencies>
            </attribute>
            <attribute name="reservedBy">
                <description>Contains a list of MO instances that reserve this MO instance.</description>
                <readOnly/>
                <dataType>
                    <sequence>
                        <moRef name="ManagedObject"/>
                        <minLength>0</minLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="userLabel">
                <description>Label for free use.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <derivedDataTypeRef name="RtnIpsec_IpsecTunnel_userLabel">
                        <mimName>RtnIpsec</mimName>
                    </derivedDataTypeRef>
                </dataType>
            </attribute>
        </class>
        <relationship name="Ikev2Session_ikev2PolicyProfile_to_Ikev2PolicyProfile_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="ikev2PolicyProfile">
                    <hasClass name="Ikev2PolicyProfile">
                        <mimName>RtnIkev2PolicyProfile</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="Ikev2Session">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="InterfaceIPv4_encapsulation_to_IpsecTunnel_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="encapsulation">
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="InterfaceIPv4">
                        <mimName>RtnL3InterfaceIPv4</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="InterfaceIPv6_encapsulation_to_IpsecTunnel_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="encapsulation">
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="InterfaceIPv6">
                        <mimName>RtnL3InterfaceIPv6</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="IpsecPolicy_ipsecProposalProfile_to_IpsecProposalProfile_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="ipsecProposalProfile">
                    <hasClass name="IpsecProposalProfile">
                        <mimName>RtnIpsecProposalProfile</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="IpsecPolicy">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="IpsecTunnel_localAddress_to_AddressIPv4_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="localAddress">
                    <hasClass name="AddressIPv4">
                        <mimName>RtnL3InterfaceIPv4</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="IpsecTunnel_localAddress_to_AddressIPv6_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="localAddress">
                    <hasClass name="AddressIPv6">
                        <mimName>RtnL3InterfaceIPv6</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="IpsecTunnel_remoteAddress_to_PeerIPv4_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="remoteAddress">
                    <hasClass name="PeerIPv4">
                        <mimName>RtnRoutesPeerIPv4</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="IpsecTunnel_remoteAddress_to_PeerIPv6_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="remoteAddress">
                    <hasClass name="PeerIPv6">
                        <mimName>RtnRoutesPeerIPv6</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="IpsecTunnel_remoteAddressSecondary_to_PeerIPv4_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="remoteAddressSecondary">
                    <hasClass name="PeerIPv4">
                        <mimName>RtnRoutesPeerIPv4</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="IpsecTunnel_remoteAddressSecondary_to_PeerIPv6_reservedBy">
            <biDirectionalAssociation>
                <associationEnd name="remoteAddressSecondary">
                    <hasClass name="PeerIPv6">
                        <mimName>RtnRoutesPeerIPv6</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                    <isReserving/>
                </associationEnd>
                <associationEnd name="reservedBy">
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </associationEnd>
            </biDirectionalAssociation>
        </relationship>
        <relationship name="IpsecTunnel_to_Ikev2Session">
            <containment>
                <parent>
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="Ikev2Session">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>1</max>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="true"/>
                    <extension name="canDelete" value="true"/>
                </domainExtension>
            </containment>
        </relationship>
        <relationship name="IpsecTunnel_to_IpsecPolicy">
            <containment>
                <parent>
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="IpsecPolicy">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>5</max>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="true"/>
                    <extension name="canDelete" value="true"/>
                </domainExtension>
            </containment>
        </relationship>
    </mim>
    <interMim>
        <relationship name="Router_to_IpsecTunnel">
            <domainExtension domain="CoreMW">
                <extension name="splitImmDn" value="false"/>
            </domainExtension>
            <containment>
                <parent>
                    <hasClass name="Router">
                        <mimName>RtnL3Router</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="IpsecTunnel">
                        <mimName>RtnIpsec</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                        <max>5</max>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="true"/>
                    <extension name="canDelete" value="true"/>
                </domainExtension>
            </containment>
        </relationship>
    </interMim>
</models>
